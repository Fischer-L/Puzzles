class Root:
  def __init__(self, v):
    self.v = v
    # The left chain holds nodes(from big to small) smaller than root
    self.left = None
    # The right chain holds nodes(from small to bug) bigger than root
    self.right = None

class Node:
  def __init__(self, v):
    self.v = v
    self.child = None
    self.parent = None
    
class Solution:
  """
  Given a positive intergers array, A.
  Find the min dii between 2 integers in A.
  A will at least contain 2 integers.
  No dulplicated integers.
  """
  
  def findBySorting(self, v):
    sA = sorted(A)
    lenA = len(sA)
    min = -1
    i = 0
    j = 1
    while j < lenA:
      diff = abs(sA[i] - sA[j])
      if min < 0 or min > diff: min = diff
      i += 1
      j += 1
    return min
  
  def findByDividingTree(self, A):
    root = Root(A[0])
    lenA = len(A)
    min = -1
    for i in range(1, lenA):
      n = Node(A[i])
      if n.v < root.v:
        if not root.left:
          root.left = n
          n.parent = root
        else:
          l = root.left
          while l:
            if n.v > l.v:
              p = l.parent
              p.child = n
              n.parent = p
              n.child = l
              l.parent = n
              l = None
            else:
              if l.child:
                l = l.child
              else:
                l.child = n
                n.parent = l
                l = None
      else:
          if not root.right:
            root.right = n
            n.parent = root
          else:
            r = root.right
            while r:
              if n.v < r.v:
                p = r.parent
                p.child = n
                n.parent = p
                n.child = r
                r.parent = n
                r = None
              else:
                if r.child:
                  r = r.child
                else:
                  r.child = n
                  n.parent = r
                  r = None
      diff = abs(n.v - n.parent.v)
      if min < 0 or min > diff:
        min = diff
      if n.child:
        diff = abs(n.v - n.child.v)
        if min > diff: min = diff
      # Optimization: 1 is the possible smallest min so early break
      if min == 1: break
    return min
    
A = [342,5520,4247,2280,9419,5260,7782,7450,6609,7876,1951,5420,7594,739,6079,1930,3460,1038,3274,6571,5816,6349,7767,7894,813,8503,5335,7637,4162,4486,9354,1176,8369,3786,5931,2048,8176,3937,3205,9865,9890,5862,2311,3423,2785,1028,5323,2642,117,6885,7383,6797,3088,4770,8242,1753,4415,3859,7499,9936,1387,2560,5273,1890,2881,7905,7990,1008,7125,3858,8957,2783,2012,5100,4267,5725,3585,9126,4427,4466,1836,5382,9316,7555,2,3483,5786,3356,1901,6389,6065,5903,1865,3633,4965,6565,3162,362,5274,1324,5959,856,8781,9843,650,1391,2025,5653,3021,3128,1289,5142,6633,3298,7986,4824,5385,9576,7413,8347,3840,9597,1742,3799,522,1965,5455,8027,9147,3531,8238,5301,7617,6559,5838,5347,164,3942,3783,7419,607,3590,1135,1570,7155,879,1269,136,6030,7279,5233,8504,9340,2148,6745,7132,5957,9267,5054,5186,8969,3270,4959,8277,7324,1593,65,9852,5411,1128,6347,9790,9835,5066,7750,404,5804,8202,2969,4786,8374,7479,6201,5176,4651,5573,2707,4313,5672,2038,756,8089,8905,1887,9324,5895,9624,478,4607,3881,5374,2295,6058,5138,7706,4263,1260,3405,2984,4679,3602,7322,6786,9967,9433,3046,1103,1385,4430,9776,9898,4784,5350,8713,4414,4277,1635,9366,686,3673,3148,9280,9515,5678,595,6842,3958,210,1959,1606,8051,5193,5595,6569,7602,218,8862,906,8460,5686,2747,1864,314,751,6959,9051,8236,7849,4451,3933,7319,3501,8402,7317,3583,4296,5258,8017,227,189,3693,2618,9610,524,9525,3208,8693,5681,1504,4272,5967,6706,2641,1267,1109,3659,9014,9310,4459,1351,5893,1314,1947,7963,6268,1549,7818,1438,8087,8699,9194,6643,826,7853,9881,6394,9413,8443,9209,3546,2980,6206,6532,6621,284,9116,6788,7815,8011,520,3768,9788,5288,9444,4751,7681,9359,3015,5265,3952,4636,6076,2237,8918,7297,9920,8459,7008,3940,1383,7254,1891,1992,5431,9724,3407,2815,8940,1611,5566,2109,6258,4032,7553,8846,4881,933,2349,6280,1956,8682,4052,1015,4942,2601,2121,2671,4943,3069,7059,3565,2261,6129,1100,968,4711,8655,7115,5740,2772,2850,2900,6684,7497,9924,7756,3607,5569,2501,8989,4897,4158,8963,2651,8920,7440,4460,2892,2315,5598,7202,1647,9026,2279,1193,7808,9328,6138,3567,7644,4309,2250,1646,3477,5109,9953,6991,1679,6147,6817,5086,3563,2572,9389,9640,5980,2000,2736,9279,2106,2133,7899,9873,7789,1367,7662,9044,551,9856,1417,8422,237,5180,9259,1582,5885,535,1244,4078,5955,1407,2399,8649,2389,382,6914,3529,7583,7586,1299,8199,1823,7405,7529,7558,8645,5924,8985,9115,2790,3866,6179,7422,8403,1039,8389,2146,207,7376,5882,846,3132,2437,2957,2092,2412,4051,2216,6184,1881,9429,3052,6795,9962,4975,521,8618,4503,1166,5759,3805,4868,8454,3303,5220,8142,6825,5966,5820,4674,5107,8052,5217,8560,6799,6811,9322,8611,4494,4582,3751,1691,918,4966,8026,6518,6820,764,5830,3103,4534,6344,8620,62,4260,1615,8135,998,1202,7807,5654,6936,4474,8446,8824,9744,831,3767,6498,7715,9737,4908,8810,8146,9136,7804,7494,703,8664,3955,8231,9754,5310,8506,1101,9168,9901,7709,329,8319,5732,3527,3646,7094,8014,4629,6512,3905,4851,3945,454,2655,5460,8438,8896,2130,9766,1964,3012,8723,3396,832,8558,7749,3732,4598,372,301,6558,2798,3081,740,1640,7192,8259,5296,5074,8195,6944,3273,1054,1389,8322,4148,1137,5669,2152,7042,5546,7484,8687,6971,4086,1224,9148,8444,1871,5456,9783,7550,2799,9029,7145,9539,2341,7111,4249,1739,5564,6679,6202,8158,1767,1225,101,7492,3344,5147,4772,7952,761,2120,7668,5205,5164,8879,5415,9743,9887,9393,3437,2860,5242,5449,4045,8608,7573,3797,8141,5742,4699,4547,1427,52,7013,7864,2131,9602,9793,3657,5438,205,1684,7687,8598,596,7137,3888,2789,7471,2188,5665,10,837,1359,7953,7038,4356,5594,970,6838,326,4930,9911,4033,5628,1007,429,4310,7939,4453,2699,5059,8634,8636,3530,3854,3013,9188,2535,983,4149,8512,5638,608,618,8113,434,8760,6438,3686,6216,4331,7570,1122,2847,5832,5102,7935,9245,3771,9969,6302,494,5629,5602,9357,6099,3054,195,895,27,1194,8959,6476,6186,9741,7177,8371,6267,4330,6614,3218,8981,1104,5806,2808,8114,2496,5424,1678,8116,1650,8262,1984,7510,4764,6028,2008,5512,1519,43,9686,3472,6400,4044,4892,7018,5351,6729,4635,531,3487,77,1411,8605,6951,3883,1251,1846,9,1212,573,3428,4194,8270,2517,8085,2753,6903,8118,1698,4390,9470,7698,9606,6470,7589,4939,7209,6973,4070,5123,8743,2831,3652,1550,7041,6144,9213,982,6890,9427,9489,9899,3847,399,5453,1290,1379,4622,979,7241,6183,7845,9631,9579,4256,6792,238,3941,4669,5673,1922,5719,6822,2703,1919,6947,3014,1536,6383,1949,5096,9995,4815,6411,7351,3861,6390,988,902,4084,8478,6748,883,1762,3473,623,4402,1493,9607,8818,2013,4885,3755,2049,1590,7084,8272,9583,2034,3216,4646,808,7281,228,6705,8166,9217,3939,386,5787,625,1286,9980,9777,804,6738,3431,9225,6883,7375,5574,4462,4601,8559,3346,9011,8827,5758,6598,7161,1108,6426,206,5105,3983,8172,995,7233,2871,2550,317,2022,893,8555,9496,5212,2155,8820,3766,5543,6386,3844,4947,8220,7009,8419,6266,4,6500,6965,3776,5160,6061,9063,7396,9069,677,8895,5166,4715,5909,5886,2123,634,69,4499,3589,5023,3154,7780,8040,752,8031,2322,3425,339,6845,3653,6108,1429,4457,6502,8020,4378,6841,7101,7231,2076,9077,2369,4314,6046,1457,7486,9297,8759,8938]
    
